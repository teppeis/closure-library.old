declare module goog.events {

    /**
     * Enum type for the events fired by the key handler
     * @enum {string}
     */
    export interface EventType {
        KEY: string;
    }

    /**
     * A wrapper around an element that you want to listen to keyboard events on.
     * @param {Element|Document=} opt_element The element or document to listen on.
     * @param {boolean=} opt_capture Whether to listen for browser events in
     *     capture phase (defaults to false).
     * @constructor
     * @extends {goog.events.EventTarget}
     * @final
     */
    export class KeyHandler extends goog.events.EventTarget {
        constructor(opt_element?: Element, opt_capture?: boolean);
        
        /**
         * Resets the stored previous values. Needed to be called for webkit which will
         * not generate a key up for meta key operations. This should only be called
         * when having finished with repeat key possiblities.
         */
        resetState(): void;
        
        /**
         * Handles the events on the element.
         * @param {goog.events.BrowserEvent} e  The keyboard event sent from the
         *     browser.
         */
        handleEvent(e: goog.events.BrowserEvent): void;
        
        /**
         * Returns the element listened on for the real keyboard events.
         * @return {Element|Document|null} The element listened on for the real
         *     keyboard events.
         */
        getElement(): Element;
        
        /**
         * Adds the proper key event listeners to the element.
         * @param {Element|Document} element The element to listen on.
         * @param {boolean=} opt_capture Whether to listen for browser events in
         *     capture phase (defaults to false).
         */
        attach(element: Element, opt_capture?: boolean): void;
        
        /**
         * Removes the listeners that may exist.
         */
        detach(): void;
    }

    /**
     * This class is used for the goog.events.KeyHandler.EventType.KEY event and
     * it overrides the key code with the fixed key code.
     * @param {number} keyCode The adjusted key code.
     * @param {number} charCode The unicode character code.
     * @param {boolean} repeat Whether this event was generated by keyboard repeat.
     * @param {Event} browserEvent Browser event object.
     * @constructor
     * @extends {goog.events.BrowserEvent}
     * @final
     */
    export class KeyEvent extends goog.events.BrowserEvent {
        constructor(keyCode: number, charCode: number, repeat: boolean, browserEvent: Event);
    }
}
